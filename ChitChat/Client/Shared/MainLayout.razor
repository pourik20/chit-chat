@inherits LayoutComponentBase
@using Microsoft.AspNetCore.SignalR.Client;

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
	<MudAppBar Elevation="0">
		<MudToolBar DisableGutters="true">
			<MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" />
		</MudToolBar>
		<MudText Typo="Typo.h6" Class="ml-4">chit-chat</MudText>
		<MudSpacer />
		<LoginDisplay />
	</MudAppBar>
	<MudDrawer @bind-Open="_drawerOpen" Elevation="1">
		<NavMenu />
	</MudDrawer>
	<MudMainContent>
		
		<MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
			<CascadingValue Value="hubConnection">
				@Body
			</CascadingValue>
		</MudContainer>
	</MudMainContent>
</MudLayout>

@code {
	bool _drawerOpen = false;
	void DrawerToggle()
	{
		_drawerOpen = !_drawerOpen;
	}

	private HubConnection hubConnection;
	public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
	protected override async Task OnInitializedAsync()
	{
		hubConnection = new HubConnectionBuilder().WithUrl(_navigationManager.ToAbsoluteUri("/signalRHub")).Build();
		await hubConnection.StartAsync();
		var state = await _stateProvider.GetAuthenticationStateAsync();
		var user = state.User;
		var CurrentUserId = user.Claims.Where(a => a.Type == "sub").Select(a => a.Value).FirstOrDefault();
		hubConnection.On<string, string, string>("ReceiveChatNotification", (message, receiverUserId, senderUserId) =>
		{
			if (CurrentUserId == receiverUserId)
			{
				_snackbar.Add(message, Severity.Info, config =>
				{
					config.VisibleStateDuration = 10000;
					config.HideTransitionDuration = 500;
					config.ShowTransitionDuration = 500;
					config.Action = "Chat?";
					config.ActionColor = Color.Info;
					config.Onclick = snackbar =>
					{
						_navigationManager.NavigateTo($"chat/{senderUserId}");
						return Task.CompletedTask;
					};
				});
			}
		});
		// --- //
	}
}

